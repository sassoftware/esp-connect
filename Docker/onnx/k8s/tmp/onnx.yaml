apiVersion: iot.sas.com/v1alpha1
kind: ESPServer
metadata:
  name: onnx # give the service used to access the running project a name
  #     ingress is <name>.<namespace>.$ESP_DOMAIN
  namespace: roleve
spec:
  # Add fields here
  failover: false
  loadBalancePolicy: "default" # in the future, we could add cluster-manager hash/round-robin...
  # if model has prefix "b64", treat it as based64 encoded 
  model: ""
  espProperties:
    server.xml: ""
  name: onnx
  projectTemplate: # deployment template for the project, overridden by ESPServer; ((...)) means a placeholder for the operator to fill in, ports 31415 and 31416 will be replaced if the project is configured to use different ports.
    autoscale:
      minReplicas: 1
      maxReplicas: 1
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 50
    deployment:
      apiVersion: ""
      kind: ESPTemplate
      spec:
        selector:
          matchLabels:
        template: # required
          spec: # required
            volumes:
              - name: data
                persistentVolumeClaim:
                  claimName: esp-pv
            containers:
              - name: ((PROJECT_SERVICE_NAME)) # DONT CHANGE THE NAME
                resources:
                  requests:
                    memory: "1Gi"
                    cpu: "1"
                  limits:
                    memory: "2Gi"
                    cpu: "2"
                env:
                  - name: PYTHONPATH
                    value: /mnt/data/onnx
                volumeMounts:
                  - mountPath: /mnt/data # path persistent volume gets mounted to
                    name: data # the volume specified below
                    #                   subPath: roleve
  loadBalancerTemplate: # deployment template for the project, overridden by ESPServer; ((...)) means a placeholder for the operator to fill in, ports 31415 and 31416 will be replaced if the project is configured to use different ports.
    deployment:
      apiVersion: ""
      kind: ESPTemplate
      spec: # required for deployment spec
        template: # required
          spec: # required
            containers:
              - name: ((PROJECT_SERVICE_NAME))
